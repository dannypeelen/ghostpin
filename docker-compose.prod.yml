version: '3.8'

services:
  # Database Service
  postgres:
    image: postgres:13
    container_name: ghostpin-postgres-prod
    environment:
      POSTGRES_DB: ghostpin
      POSTGRES_USER: ${DB_USER:-ghostpin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ghostpin} -d ghostpin"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ghostpin-network

  # Redis Cache Service
  redis:
    image: redis:6-alpine
    container_name: ghostpin-redis-prod
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ghostpin-network

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ghostpin-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ghostpin
      DB_USER: ${DB_USER:-ghostpin}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_here}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      API_BASE_URL: ${API_BASE_URL:-http://localhost:3001}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_METRICS: true
      METRICS_PORT: 9090
    ports:
      - "3001:3001"
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ghostpin-network

  # Dashboard Service
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: ghostpin-dashboard-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_BASE_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ghostpin-network

  # Real Website Demo (Legitimate Store)
  demo-real:
    image: nginx:alpine
    container_name: ghostpin-demo-real
    volumes:
      - ./demo/real-website.html:/usr/share/nginx/html/index.html:ro
      - ./sdk:/usr/share/nginx/html/sdk:ro
      - ./nginx/real-site.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ghostpin-network

  # Scam Website Demo (Phishing Attempt)
  demo-scam:
    image: nginx:alpine
    container_name: ghostpin-demo-scam
    volumes:
      - ./demo/scam-website.html:/usr/share/nginx/html/index.html:ro
      - ./sdk:/usr/share/nginx/html/sdk:ro
      - ./nginx/scam-site.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8081:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ghostpin-network

  # Nginx Reverse Proxy (Optional - for SSL termination)
  nginx-proxy:
    image: nginx:alpine
    container_name: ghostpin-nginx-proxy
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./nginx/ssl.conf:/etc/nginx/ssl.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - dashboard
      - demo-real
      - demo-scam
    restart: unless-stopped
    networks:
      - ghostpin-network

  # Prometheus for Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ghostpin-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - ghostpin-network

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ghostpin-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_SERVER_ROOT_URL: http://localhost:3002
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ghostpin-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ghostpin-network:
    driver: bridge
